typedef char array t_cube [6][9];

int white;
int yellow;
int green;
int blue;
int red;
int orange;

t_cube cube;

void init_cube (){
    int i;
    int j;

    for(i = 0; i < 6; i++){
        for(j = 0; j < 9; j++){
            switch(i){
            case 0:
                cube[i][j] = 'W';
                break;
            case 1:
                cube[i][j] = 'Y';
                break;
            case 2:
                cube[i][j] = 'G';
                break;
            case 3:
                cube[i][j] = 'B';
                break;
            case 4:
                cube[i][j] = 'R';
                break;
            case 5:
                cube[i][j] = 'O';
                break;
            }
        }
    }
}

int test_finished (){
    int i;
    int j;

    for(i = 0; i < 6; i++){
        for(j = 0; j < 9; j++){
            switch(i){
            case 0:
                if (cube[i][j] != 'W'){
                    return 0;
                }
                break;
            case 1:
                if (cube[i][j] != 'Y'){
                    return 0;
                }
                break;
            case 2:
                if (cube[i][j] != 'G'){
                    return 0;
                }
                break;
            case 3:
                if (cube[i][j] != 'B'){
                    return 0;
                }
                break;
            case 4:
                if (cube[i][j] != 'R'){
                    return 0;
                }
                break;
            case 5:
                if (cube[i][j] != 'O'){
                    return 0;
                }
                break;
            }
        }
    }

    return 1;
}

void turn_R_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[white][2]; cube[white][2] = cube[green][2]; cube[green][2] = cube[yellow][2]; cube[yellow][2] = cube[blue][2]; cube[blue][2] = tmp;
        tmp = cube[white][5]; cube[white][5] = cube[green][5]; cube[green][5] = cube[yellow][5]; cube[yellow][5] = cube[blue][5]; cube[blue][5] = tmp;
        tmp = cube[white][8]; cube[white][8] = cube[green][8]; cube[green][8] = cube[yellow][8]; cube[yellow][8] = cube[blue][8]; cube[blue][8] = tmp;

        tmp = cube[red][0]; cube[red][0] = cube[red][6]; cube[red][6] = cube[red][8]; cube[red][8] = cube[red][2]; cube[red][2] = tmp;
        tmp = cube[red][1]; cube[red][1] = cube[red][3]; cube[red][3] = cube[red][7]; cube[red][7] = cube[red][5]; cube[red][5] = tmp;
    }
}

void turn_L_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[white][0]; cube[white][0] = cube[blue][0]; cube[blue][0] = cube[yellow][0]; cube[yellow][0] = cube[green][0]; cube[green][0] = tmp;
        tmp = cube[white][3]; cube[white][3] = cube[blue][3]; cube[blue][3] = cube[yellow][3]; cube[yellow][3] = cube[green][3]; cube[green][3] = tmp;
        tmp = cube[white][6]; cube[white][6] = cube[blue][6]; cube[blue][6] = cube[yellow][6]; cube[yellow][6] = cube[green][6]; cube[green][6] = tmp;

        tmp = cube[orange][0]; cube[orange][0] = cube[orange][6]; cube[orange][6] = cube[orange][8]; cube[orange][8] = cube[orange][2]; cube[orange][2] = tmp;
        tmp = cube[orange][1]; cube[orange][1] = cube[orange][3]; cube[orange][3] = cube[orange][7]; cube[orange][7] = cube[orange][5]; cube[orange][5] = tmp;
    }
}

void turn_U_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[green][0]; cube[green][0] = cube[red][0]; cube[red][0] = cube[blue][8]; cube[blue][8] = cube[orange][0]; cube[orange][0] = tmp;
        tmp = cube[green][2]; cube[green][2] = cube[red][2]; cube[red][2] = cube[blue][6]; cube[blue][6] = cube[orange][2]; cube[orange][2] = tmp;
        tmp = cube[green][1]; cube[green][1] = cube[red][1]; cube[red][1] = cube[blue][7]; cube[blue][7] = cube[orange][1]; cube[orange][1] = tmp;

        tmp = cube[white][0]; cube[white][0] = cube[white][6]; cube[white][6] = cube[white][8]; cube[white][8] = cube[white][2]; cube[white][2] = tmp;
        tmp = cube[white][1]; cube[white][1] = cube[white][3]; cube[white][3] = cube[white][7]; cube[white][7] = cube[white][5]; cube[white][5] = tmp;
    }
}

void turn_D_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[green][6]; cube[green][6] = cube[orange][6]; cube[orange][6] = cube[blue][2]; cube[blue][2] = cube[red][6]; cube[red][6] = tmp;
        tmp = cube[green][8]; cube[green][8] = cube[orange][8]; cube[orange][8] = cube[blue][0]; cube[blue][0] = cube[red][8]; cube[red][8] = tmp;
        tmp = cube[green][7]; cube[green][7] = cube[orange][7]; cube[orange][7] = cube[blue][1]; cube[blue][1] = cube[red][7]; cube[red][7] = tmp;

        tmp = cube[yellow][0]; cube[yellow][0] = cube[yellow][6]; cube[yellow][6] = cube[yellow][8]; cube[yellow][8] = cube[yellow][2]; cube[yellow][2] = tmp;
        tmp = cube[yellow][1]; cube[yellow][1] = cube[yellow][3]; cube[yellow][3] = cube[yellow][7]; cube[yellow][7] = cube[yellow][5]; cube[yellow][5] = tmp;
    }
}

void turn_F_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[white][6]; cube[white][6] = cube[orange][8]; cube[orange][8] = cube[yellow][2]; cube[yellow][2] = cube[red][0]; cube[red][0] = tmp;
        tmp = cube[white][8]; cube[white][8] = cube[orange][2]; cube[orange][2] = cube[yellow][0]; cube[yellow][0] = cube[red][6]; cube[red][6] = tmp;
        tmp = cube[white][7]; cube[white][7] = cube[orange][5]; cube[orange][5] = cube[yellow][1]; cube[yellow][1] = cube[red][3]; cube[red][3] = tmp;

        tmp = cube[green][0]; cube[green][0] = cube[green][6]; cube[green][6] = cube[green][8]; cube[green][8] = cube[green][2]; cube[green][2] = tmp;
        tmp = cube[green][1]; cube[green][1] = cube[green][3]; cube[green][3] = cube[green][7]; cube[green][7] = cube[green][5]; cube[green][5] = tmp;
    }
}

void turn_B_face (int n){
    int i;
    char tmp;

    for(i = 0; i < n; i++){
        tmp = cube[white][0]; cube[white][0] = cube[red][2]; cube[red][2] = cube[yellow][8]; cube[yellow][8] = cube[orange][6]; cube[orange][6] = tmp;
        tmp = cube[white][2]; cube[white][2] = cube[red][8]; cube[red][8] = cube[yellow][6]; cube[yellow][6] = cube[orange][0]; cube[orange][0] = tmp;
        tmp = cube[white][1]; cube[white][1] = cube[red][5]; cube[red][5] = cube[yellow][7]; cube[yellow][7] = cube[orange][3]; cube[orange][3] = tmp;

        tmp = cube[blue][0]; cube[blue][0] = cube[blue][6]; cube[blue][6] = cube[blue][8]; cube[blue][8] = cube[blue][2]; cube[blue][2] = tmp;
        tmp = cube[blue][1]; cube[blue][1] = cube[blue][3]; cube[blue][3] = cube[blue][7]; cube[blue][7] = cube[blue][5]; cube[blue][5] = tmp;
    }
}

void display_cube (){
    printf("\n\n\n");
    printf("           %c %c %c\n", cube[blue][0], cube[blue][1], cube[blue][2]);
    printf("           %c %c %c\n", cube[blue][3], cube[blue][4], cube[blue][5]);
    printf("           %c %c %c\n\n", cube[blue][6], cube[blue][7], cube[blue][8]);
    printf("   %c %c %c   %c %c %c   %c %c %c   %c %c %c\n", cube[orange][6], cube[orange][3], cube[orange][0], cube[white][0], cube[white][1], cube[white][2], cube[red][2], cube[red][5], cube[red][8], cube[yellow][8], cube[yellow][7], cube[yellow][6]);
    printf("   %c %c %c   %c %c %c   %c %c %c   %c %c %c\n", cube[orange][7], cube[orange][4], cube[orange][1], cube[white][3], cube[white][4], cube[white][5], cube[red][1], cube[red][4], cube[red][7], cube[yellow][5], cube[yellow][4], cube[yellow][3]);
    printf("   %c %c %c   %c %c %c   %c %c %c   %c %c %c\n\n", cube[orange][8], cube[orange][5], cube[orange][2], cube[white][6], cube[white][7], cube[white][8], cube[red][0], cube[red][3], cube[red][6], cube[yellow][2], cube[yellow][1], cube[yellow][0]);
    printf("           %c %c %c\n", cube[green][0], cube[green][1], cube[green][2]);
    printf("           %c %c %c\n", cube[green][3], cube[green][4], cube[green][5]);
    printf("           %c %c %c\n\n\n\n", cube[green][6], cube[green][7], cube[green][8]);
}

void scramble (int n){
    int i;
    int face;
    int previous;
    int nb;

    printf("\n\n Mélange : ");

    previous = -1;

    for(i = 0; i < n; i++){
        do {
            face = rand(0, 5);
        } while(face == previous);

        nb = rand(1, 3);

        switch(face){
        case 0:
            printf("R");
            turn_R_face(nb);
            break;
        case 1:
            printf("L");
            turn_L_face(nb);
            break;
        case 2:
            printf("U");
            turn_U_face(nb);
            break;
        case 3:
            printf("D");
            turn_D_face(nb);
            break;
        case 4:
            printf("F");
            turn_F_face(nb);
            break;
        case 5:
            printf("B");
            turn_B_face(nb);
            break;
        }

        switch(nb){
        case 1:
            printf("  ");
            break;
        case 2:
            printf("2  ");
            break;
        case 3:
            printf("-  ");
            break;
        }

        previous = face;
    }

    printf("\n");
}

main() {
    char move;
    int n_scramble;
    int nb;

    white = 0;
    yellow = 1;
    green = 2;
    blue = 3;
    red = 4;
    orange = 5;

    init_cube();

    nb = 0;

    move = 'R';

    printf("\n\n     *** Rubik's Cube Game ! ***\n\n\n");
    printf("Nombre de mouvement(s) pour le mélange : ");
    scanf("%i", n_scramble);

    scramble(n_scramble);
    
    while(move == 'R' || move == 'L' || move == 'U' || move == 'D' || move == 'F' || move == 'B' ||
          move == 'r' || move == 'l' || move == 'u' || move == 'd' || move == 'f' || move == 'b'){
        display_cube();

        if(test_finished()){
            printf("     *** BRAVO ! ***\nCube résolu en %i coup(s) !\n\n\n", nb);
            move = 'X';
        }else{
            printf("Mouvement : ");
            scanf("%c", move);

            switch(move){
            case 'R':
                turn_R_face(1);
                break;
            case 'L':
                turn_L_face(1);
                break;
            case 'U':
                turn_U_face(1);
                break;
            case 'D':
                turn_D_face(1);
                break;
            case 'F':
                turn_F_face(1);
                break;
            case 'B':
                turn_B_face(1);
                break;
            case 'r':
                turn_R_face(3);
                break;
            case 'l':
                turn_L_face(3);
                break;
            case 'u':
                turn_U_face(3);
                break;
            case 'd':
                turn_D_face(3);
                break;
            case 'f':
                turn_F_face(3);
                break;
            case 'b':
                turn_B_face(3);
                break;
            }

            nb++;
        }
    }
}
